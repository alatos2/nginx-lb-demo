worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    # Define the cache path, size, and other parameters
    # proxy_cache_path <path> levels=1:2 keys_zone=<name>:<size> max_size=<size> inactive=<time> use_temp_path=off;
    # <path>: Directory to store cached files (e.g., /var/cache/nginx/my_cache)
    # levels=1:2: Creates a two-level directory hierarchy for efficient storage
    # keys_zone=my_cache:10m: Defines a shared memory zone for metadata (keys_zone, name, size)
    # max_size=1g: Maximum size of the cache on disk (1 Gigabyte)
    # inactive=60m: Items not accessed for 60 minutes are removed from cache
    # use_temp_path=off: Prevents NGINX from writing to a temporary path first, which can improve performance
    proxy_cache_path /var/cache/nginx/my_cache levels=1:2 keys_zone=my_cache:10m inactive=60m max_size=1g use_temp_path=off;

    # Define the upstream group for your backend servers
    upstream my_backends {
        # Use the service names from docker-compose as hostnames
        server backend1:8000 weight=1;
        server backend2:8000 weight=3;
        # You can specify other load balancing methods here, e.g.:
        # least_conn;
        # ip_hash;
        # server backend1:8000 weight=3;
        # server backend2:8000 weight=1;
    }

    server {
        listen 80;
        server_name localhost; # Or your domain if testing on a real one

        location / {
            # Proxy requests to the upstream group
            proxy_pass http://my_backends;

            # Enable caching for this location using the defined zone
            proxy_cache my_cache;

            # Define for how long a response should be considered valid in cache
            # The 200 (OK) status code response will be cached for 1 minute
            proxy_cache_valid 200 60s;
            # For 404 (Not Found) responses, cache for 1 second (useful to prevent repeated hits for non-existent resources)
            proxy_cache_valid 404 1s;

            # Add headers to show if content was served from cache
            add_header X-Cache-Status $upstream_cache_status;

            # Optional: Allow stale content if backend is down
            proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;

            # Recommended headers for proper proxying

            # Important headers for proper request handling and logging
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}